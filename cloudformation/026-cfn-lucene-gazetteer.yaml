## Decided not to deploy separate from tike
# AWSTemplateFormatVersion : '2010-09-09'
# Description: "Apache Tika CTAKES Endpoint"

# Parameters:
#   ProjectName:
#     Type: String
#   ImageUri:
#     Type: String
#   ServiceName:
#     Type: String
#   ServiceHostName:
#     Type: String
#   Route53HostedZoneId:
#     Type: String
#   InternalRoute53HostedZoneId:
#     Type: String
#   S3PrefixListId:
#     Type: String
#     Description: Vpc access to S3, obtained with "aws  --profile <your-profile> --region us-east-1 ec2 describe-prefix-lists"
#   MinServices:
#     Type: Number
#   MaxServices:
#     Type: Number
#   DesiredServices:
#     Type: Number

# Resources:
#   logGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/ecs/${ProjectName}/${AWS::StackName}"
#       RetentionInDays: 14

#   targetGroup:
#     Type: AWS::ElasticLoadBalancingV2::TargetGroup
#     Properties:
#       Name: !Ref ServiceName
#       HealthCheckIntervalSeconds: 10
#       HealthCheckPath: "/api/ping"
#       HealthCheckTimeoutSeconds: 5
#       UnhealthyThresholdCount: 5
#       HealthyThresholdCount: 2
#       Port: 8765
#       Protocol: HTTP
#       TargetType: ip
#       VpcId: !ImportValue prod-vpc-PrivateVpcId
#       Tags:
#         - Key: ProjectName
#           Value: !Ref ProjectName

#   internalTargetGroup:
#     Type: AWS::ElasticLoadBalancingV2::TargetGroup
#     Properties:
#       Name: !Sub "internal-${ServiceName}"
#       HealthCheckIntervalSeconds: 60
#       HealthCheckPath: "/version"
#       HealthCheckTimeoutSeconds: 5
#       UnhealthyThresholdCount: 5
#       HealthyThresholdCount: 2
#       Port: 8765
#       Protocol: HTTP
#       TargetType: ip
#       VpcId: !ImportValue prod-vpc-PrivateVpcId
#       Tags:
#         - Key: ProjectName
#           Value: !Ref ProjectName

#   fargateSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupDescription: security group applied to containers
#       VpcId: !ImportValue prod-vpc-PrivateVpcId
#       SecurityGroupIngress:
#         - IpProtocol: 'tcp'
#           FromPort: 8765
#           ToPort: 8765
#           SourceSecurityGroupId: !ImportValue prod-general-infra-Lb-SecurityGroupId
#         - IpProtocol: 'tcp'
#           FromPort: 8765
#           ToPort: 8765
#           SourceSecurityGroupId: !ImportValue prod-general-infra-InternalLb-SecurityGroupId
#       SecurityGroupEgress:
#         # I guess this thing needs to communicate with other apis
#         - FromPort: 443
#           ToPort: 443
#           IpProtocol: 'tcp'
#           CidrIp: '0.0.0.0/0'
#         - FromPort: 80
#           ToPort: 80
#           IpProtocol: 'tcp'
#           CidrIp: '0.0.0.0/0'
#         # Access to s3
#         - FromPort: 443
#           ToPort: 443
#           IpProtocol: 'tcp'
#           DestinationPrefixListId: !Ref S3PrefixListId
#         - FromPort: 80
#           ToPort: 80
#           IpProtocol: 'tcp'
#           DestinationPrefixListId: !Ref S3PrefixListId
#       Tags:
#         - Key: ProjectName
#           Value: !Ref ProjectName

#   listenerRule:
#     Type: AWS::ElasticLoadBalancingV2::ListenerRule
#     Properties:
#       Actions:
#         # - Type: authenticate-cognito
#         #   Order: 1
#         #   AuthenticateCognitoConfig: 
#         #     OnUnauthenticatedRequest: deny
#         #     Scope: !Sub "${ServiceName}/read_thing"
#         #     # SessionCookieName: AWSELBAuthSessionCookie
#         #     # SessionTimeout: 28800
#         #     UserPoolArn: !ImportValue prod-auth-Cognito-UserPoolArn
#         #     UserPoolDomain: !ImportValue prod-auth-Cognito-UserPoolDomain
#         #     UserPoolClientId: !Ref cognitoAppClient
#         - TargetGroupArn: !Ref targetGroup
#           Order: 1
#           Type: forward
#       Conditions:
#         - Field: host-header
#           HostHeaderConfig:
#             Values:
#               - !Ref ServiceHostName
#       ListenerArn: !ImportValue prod-general-infra-Lb-HttpsListenerArn
#       Priority: 7

#   internalListenerRule:
#     Type: AWS::ElasticLoadBalancingV2::ListenerRule
#     Properties:
#       Actions:
#         - TargetGroupArn: !Ref internalTargetGroup
#           Order: 1
#           Type: forward
#       Conditions:
#         - Field: host-header
#           HostHeaderConfig:
#             Values:
#               - !Sub "${ServiceHostName}.internal"
#       ListenerArn: !ImportValue prod-general-infra-InternalLb-HttpListenerArn
#       Priority: 7

#   taskDef:
#     Type: AWS::ECS::TaskDefinition
#     Properties:
#       ContainerDefinitions:
#         - Name: !Ref ServiceName
#           EntryPoint:
#             - "lucene-geo-gazetteer"
#           Command: 
#             - "-server"
#           Essential: true
#           Image: !Ref ImageUri
#           LinuxParameters:
#             Capabilities:
#               Drop: 
#                 - "ALL"
#           LogConfiguration:
#             LogDriver: awslogs
#             Options:
#               awslogs-region: !Ref AWS::Region
#               awslogs-group: !Ref logGroup
#               awslogs-stream-prefix: !Ref ServiceName
#           # MemoryReservation: 16384
#           PortMappings:
#             - ContainerPort: 8765
#               HostPort: 8765
#               Protocol: tcp
#           Privileged: false
#           ReadonlyRootFilesystem: true
#           User: "35002:35002"
#           Ulimits:
#             - Name: nofile
#               SoftLimit: 65536
#               HardLimit: 65536
#             - Name: memlock
#               SoftLimit: -1
#               HardLimit: -1
#       Cpu: 4096
#       ExecutionRoleArn: !GetAtt taskExecutionRole.Arn
#       Memory: 24576
#       NetworkMode: "awsvpc"
#       RequiresCompatibilities: 
#         - FARGATE
#       TaskRoleArn: !GetAtt taskRole.Arn
#       Tags:
#         - Key: ProjectName
#           Value: !Ref ProjectName

#   taskExecutionRole:
#     Type: AWS::IAM::Role
#     Properties:
#       Path: /am-taskexecuton-role/
#       PermissionsBoundary: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/Security_Boundary_NoIAM"
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           -
#             Effect: "Allow"
#             Principal:
#               Service: "ecs-tasks.amazonaws.com"
#             Action:
#               - "sts:AssumeRole"
#       Policies:
#         - PolicyName: "auth_ecr"
#           PolicyDocument:
#             Version: "2012-10-17"
#             Statement:
#               - Effect: Allow
#                 Resource: "*"
#                 Action:
#                   - "secretsmanager:GetSecretValue"
#                   - "kms:Decrypt"
#       ManagedPolicyArns:
#         - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
#       Tags:
#         - Key: ProjectName
#           Value: !Ref ProjectName

#   taskRole:
#     Type: AWS::IAM::Role
#     Properties:
#       Path: /am-taskexecuton-role/
#       PermissionsBoundary: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/Security_Boundary_NoIAM"
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           -
#             Effect: "Allow"
#             Principal:
#               Service: "ecs-tasks.amazonaws.com"
#             Action:
#               - "sts:AssumeRole"
#       Tags:
#         - Key: ProjectName
#           Value: !Ref ProjectName

#   autoScalingRole:
#     Type: AWS::IAM::Role
#     Properties:
#       Path: /am-taskexecuton-role/
#       PermissionsBoundary: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/Security_Boundary_NoIAM"
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           -
#             Effect: "Allow"
#             Principal:
#               Service: "application-autoscaling.amazonaws.com"
#             Action:
#               - "sts:AssumeRole"
#       Policies:
#         - PolicyName: service-autoscaling
#           PolicyDocument:
#             Version: "2012-10-17"
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - "application-autoscaling:*"
#                   - "cloudwatch:DescribeAlarms"
#                   - "cloudwatch:PutMetricAlarm"
#                 Resource: "*"
#               - Effect: Allow
#                 Action:
#                   - "ecs:DescribeServices"
#                   - "ecs:UpdateService"
#                 Resource: !Ref fargateService
#       Tags:
#         - Key: ProjectName
#           Value: !Ref ProjectName

#   fargateService:
#     Type: AWS::ECS::Service
#     Properties:
#       LaunchType: FARGATE
#       ServiceName: !Ref ServiceName
#       Cluster: !ImportValue prod-general-infra-EcsCluster
#       SchedulingStrategy: REPLICA
#       DesiredCount: !Ref DesiredServices
#       TaskDefinition: !Ref taskDef
#       HealthCheckGracePeriodSeconds: 300
#       NetworkConfiguration:
#         AwsvpcConfiguration:
#           AssignPublicIp: DISABLED
#           Subnets: 
#             - Fn::Select:
#               - 0
#               - Fn::Split:
#                 - ','
#                 - Fn::ImportValue: prod-vpc-PrivateSubnetIds
#             - Fn::Select:
#               - 5
#               - Fn::Split:
#                 - ','
#                 - Fn::ImportValue: prod-vpc-PrivateSubnetIds
#           SecurityGroups:
#             - !Ref fargateSecurityGroup
#             - !ImportValue "prod-vpc-Ec2EcsHostDefaultSecurityGroup"
#       LoadBalancers:
#         - TargetGroupArn: !Ref targetGroup
#           ContainerPort: 8765
#           ContainerName: !Ref ServiceName
#         # - TargetGroupArn: !Ref internalTargetGroup
#         #   ContainerPort: 8765
#         #   ContainerName: !Ref ServiceName
#       Tags:
#         - Key: ProjectName
#           Value: !Ref ProjectName

#   autoScalingTarget:
#     Type: AWS::ApplicationAutoScaling::ScalableTarget
#     Properties:
#       MaxCapacity: !Ref MaxServices
#       MinCapacity: !Ref MinServices
#       ResourceId: !Join ["/", [service, !ImportValue prod-general-infra-EcsCluster, !GetAtt [fargateService, Name]]]
#       RoleARN: !GetAtt autoScalingRole.Arn
#       ScalableDimension: "ecs:service:DesiredCount"
#       ServiceNamespace: ecs

#   autoScalingPolicy:
#     Type: AWS::ApplicationAutoScaling::ScalingPolicy
#     Properties:
#       PolicyName: !Join ['', [!ImportValue prod-general-infra-EcsCluster, AutoScalingPolicy]]
#       PolicyType: TargetTrackingScaling
#       ScalingTargetId: !Ref autoScalingTarget
#       TargetTrackingScalingPolicyConfiguration:
#         PredefinedMetricSpecification:
#           PredefinedMetricType: ECSServiceAverageCPUUtilization
#         ScaleInCooldown: 10
#         ScaleOutCooldown: 3
#         # Keep things at or lower than n% CPU utilization
#         TargetValue: 75

#   dnsRecord:
#     Type: AWS::Route53::RecordSet
#     Properties:
#       AliasTarget:
#         DNSName: !ImportValue prod-general-infra-Lb-DNSName
#         EvaluateTargetHealth: true
#         HostedZoneId: !ImportValue prod-general-infra-Lb-HostedZoneId
#       HostedZoneId: !Ref Route53HostedZoneId
#       Name: !Ref ServiceHostName
#       Type: A

#   # internalDnsRecord:
#   #   Type: AWS::Route53::RecordSet
#   #   Properties:
#   #     AliasTarget:
#   #       DNSName: !ImportValue prod-general-infra-InternalLb-DNSName
#   #       EvaluateTargetHealth: true
#   #       HostedZoneId: !ImportValue prod-general-infra-InternalLb-HostedZoneId
#   #     HostedZoneId: !Ref InternalRoute53HostedZoneId
#   #     Name: !Sub "${ServiceHostName}.internal"
#   #     Type: A
