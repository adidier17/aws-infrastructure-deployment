AWSTemplateFormatVersion: '2010-09-09'
Description: Elasticsearch

Parameters:
  ProjectName:
    Type: String
    Description: >-
      Choose a name that will be used consistently throughout all resources
      provisioned to support this effort.

  ESMasterCount:
    Type: Number
    Default: 0

  ESMasterType:
    Type: String
    Default: "m5.large.elasticsearch"

  ESVolumeSize:
    Type: Number
    Default: 128

  ESVolumeIops:
    Type: Number
    Default: 0

  ESVersion:
    Type: String
    Default: "7.4"

  ESDataNodeCount:
    Type: Number
    Default: 2

  ESDataNodeType:
    Type: String
    Default: "m5.large.elasticsearch"

  S3PrefixListId:
    Type: String
    Description: Vpc access to S3, obtained with "aws  --profile <your-profile> --region us-east-1 ec2 describe-prefix-lists"

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  BastionHostName:
    Type: String

  SshCaKey:
    Type: String

  Route53HostedZoneId:
    Type: String

Conditions:
  HasDedicatedMasterNodes: !Not [!Equals [!Ref ESMasterCount, 0]]
  HasSingleClusterInstance: !Equals [!Ref ESDataNodeCount, 1]
  HasProvisionedIops: !Not [!Equals [!Ref ESVolumeIops, 0]]

Resources:
  ESCluster:
    Type: "AWS::Elasticsearch::Domain"
    Properties:
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              # Just had to open this up for access via the bastion server.
              - 'es:ESHttp*'
              # - 'es:ESHttpGet'
              # - 'es:ESHttpHead'
              # # Need POST and I cannot use IAM roles for Kibana, go figure.
              # - 'es:ESHttpPost'
            Resource: !Sub 'arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/${AWS::StackName}/*'
      DomainName: !Ref AWS::StackName
      EBSOptions:
        EBSEnabled: true
        Iops: !Ref ESVolumeIops
        VolumeSize: !Ref 'ESVolumeSize'
        VolumeType: !If [HasProvisionedIops, "io1", "gp2"]
      ElasticsearchVersion: !Ref ESVersion
      ElasticsearchClusterConfig:
        DedicatedMasterCount: !If [HasDedicatedMasterNodes, !Ref ESMasterCount, !Ref 'AWS::NoValue']
        DedicatedMasterEnabled: !If [HasDedicatedMasterNodes, true, false]
        DedicatedMasterType: !If [HasDedicatedMasterNodes, !Ref ESMasterType, !Ref 'AWS::NoValue']
        InstanceCount: !Ref ESDataNodeCount
        InstanceType: !Ref ESDataNodeType
        ZoneAwarenessEnabled: !If [HasSingleClusterInstance, false, true]
        ZoneAwarenessConfig:
          AvailabilityZoneCount: 2
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      SnapshotOptions:
        AutomatedSnapshotStartHour: 8
      VPCOptions:
        SubnetIds:
          - Fn::Select:
            - 0
            - Fn::Split:
              - ','
              - Fn::ImportValue: prod-vpc-PrivateSubnetIds
          - Fn::Select:
            - 5
            - Fn::Split:
              - ','
              - Fn::ImportValue: prod-vpc-PrivateSubnetIds
        SecurityGroupIds:
          - !GetAtt ESSecurityGroup.GroupId
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  ESSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Make group for ES
      VpcId: !ImportValue prod-vpc-PrivateVpcId
      SecurityGroupEgress:
        - FromPort: 443
          ToPort: 443
          IpProtocol: 'tcp'
          DestinationPrefixListId: !Ref S3PrefixListId
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  ESSecurityGroupAllSelfEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId: !GetAtt ESSecurityGroup.GroupId
      IpProtocol: '-1'
      GroupId: !GetAtt ESSecurityGroup.GroupId

  ESSecurityGroupAllSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId: !GetAtt ESSecurityGroup.GroupId
      IpProtocol: '-1'
      GroupId: !GetAtt ESSecurityGroup.GroupId

  bastionInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref bastionInstanceRole

  bastionInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /am-instance/
      PermissionsBoundary: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/Security_Boundary_NoIAM"
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Policies:
        - PolicyName: ssm-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Sub "arn:aws:s3:::aws-ssm-${AWS::Region}/*"
                  - !Sub "arn:aws:s3:::aws-windows-downloads-${AWS::Region}/*"
                  - !Sub "arn:aws:s3:::amazon-ssm-${AWS::Region}/*"
                  - !Sub "arn:aws:s3:::amazon-ssm-packages-${AWS::Region}/*"
                  - !Sub "arn:aws:s3:::${AWS::Region}-birdwatcher-prod/*"
                  - !Sub "arn:aws:s3:::aws-ssm-document-attachments-${AWS::Region}/*"
                  - !Sub "arn:aws:s3:::patch-baseline-snapshot-${AWS::Region}/*"
        - PolicyName: es-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'es:ESHttp*'
                Resource: !Sub 'arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/${AWS::StackName}/*'

  bastionToEsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the bastion host
      GroupId: !GetAtt ESSecurityGroup.GroupId
      IpProtocol: 6
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !GetAtt bastionSecurityGroup.GroupId

  bastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public bastion host
      VpcId: !ImportValue prod-vpc-PrivateVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '22'
          ToPort: '22'
      SecurityGroupEgress:
        - IpProtocol: tcp
          DestinationSecurityGroupId: !GetAtt ESSecurityGroup.GroupId
          FromPort: 443
          ToPort: 443
        - FromPort: 443
          ToPort: 443
          IpProtocol: 'tcp'
          DestinationPrefixListId: !Ref S3PrefixListId
        - FromPort: 80
          ToPort: 80
          IpProtocol: 'tcp'
          DestinationPrefixListId: !Ref S3PrefixListId
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  bastionHost:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      CreditSpecification: 
        CPUCredits: standard
      ImageId: !Ref LatestAmiId
      InstanceType: "t3a.nano"
      IamInstanceProfile: !Ref bastionInstanceProfile
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref bastionControlXface
          DeviceIndex: 0
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo "${SshCaKey}" >> /etc/ssh/ca.pub
          echo "TrustedUserCAKeys /etc/ssh/ca.pub" >> /etc/ssh/sshd_config
          systemctl restart sshd
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  bastionHostEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  bastionAssociateControlPort:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt bastionHostEip.AllocationId
      NetworkInterfaceId: !Ref bastionControlXface

  bastionControlXface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId:
        Fn::Select:
          - 0
          - Fn::Split:
            - ','
            - Fn::ImportValue: prod-vpc-PublicSubnetIds
      Description: Interface for controlling traffic such as SSH
      GroupSet: 
        - !GetAtt bastionSecurityGroup.GroupId
        - !ImportValue prod-vpc-SsmClientSecurityGroup

  dnsRecordBastion:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref Route53HostedZoneId
      Name: !Ref BastionHostName
      ResourceRecords:
        - !GetAtt bastionHost.PublicIp
      TTL: "60"
      Type: A

Outputs:
  ESDomainEndpoint:
    Value: !GetAtt ESCluster.DomainEndpoint
    Export:
      Name:
        !Sub "${AWS::StackName}-ESCluster-DomainEndpoint"
  ESDomainSgId:
    Value: !GetAtt ESSecurityGroup.GroupId
    Export:
      Name:
        !Sub "${AWS::StackName}-ESCluster-SecurityGroupId"
  BastionPublicIpAddr:
    Value: !GetAtt bastionHost.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-BastionPublicIpAddr"