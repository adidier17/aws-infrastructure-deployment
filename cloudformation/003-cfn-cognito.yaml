AWSTemplateFormatVersion: '2010-09-09'
Description: User pool for simple auth. Need to figure out MFA and api (non-browser) based access.

Resources:
  userPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      UserPoolName: !Sub "${AWS::StackName}-covid19data-users"
      AdminCreateUserConfig: 
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: >-
            Welcome to covid19data.space tools!
            Your credentials are as follows:

            username: {username} 
            password: {####}

            Please contact philip.southam@jpl.nasa.gov with any questions or concerns regarding your login.
            Thank You.
          EmailSubject: "Your temporary password for covid19.data tools"
      AutoVerifiedAttributes:
        - email
      # EnabledMfas:
      #   - SOFTWARE_TOKEN_MFA
      EmailConfiguration: 
        # EmailSendingAccount: COGNITO_DEFAULT
        EmailSendingAccount: DEVELOPER
        From: admin@covid19data.space
        SourceArn: arn:aws:ses:us-east-1:595798017618:identity/admin@covid19data.space
      # MfaConfiguration: "ON"
      Policies: 
        PasswordPolicy:
          MinimumLength: "12"
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: "14"
      Schema: 
        -
          AttributeDataType: String
          Mutable: false
          Name: email
          Required: true
      UsernameAttributes:
        - email

  userPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: covid19data-users-1
      UserPoolId: !Ref userPool

  genericCognitoAppClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn:
        - genericCognitoResourceServer
    Properties: 
      ClientName: General API Client
      ExplicitAuthFlows: 
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: True
      RefreshTokenValidity: 1
      UserPoolId: !Ref userPool
      AllowedOAuthFlows: 
        - client_credentials
      AllowedOAuthScopes: 
        - general/doit
      SupportedIdentityProviders: 
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: True

  genericCognitoResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: general
      Name: General API Resources
      Scopes:
        - ScopeDescription: do the thing
          ScopeName: doit
      UserPoolId: !Ref userPool

Outputs:
  CognitoUserPoolId:
    Value: !Ref userPool
    Export:
      Name: !Sub "${AWS::StackName}-Cognito-UserPoolId"
  CognitoUserPoolArn:
    Value: !GetAtt userPool.Arn
    Export:
      Name: !Sub "${AWS::StackName}-Cognito-UserPoolArn"
  CognitoUserPoolDomain:
    Value: !Ref userPoolDomain
    Export:
      Name: !Sub "${AWS::StackName}-Cognito-UserPoolDomain"
  GeneralAppClientId:
    Value: !Ref genericCognitoAppClient
    Export:
      Name: !Sub "${AWS::StackName}-Cognito-GeneralAppClientId"